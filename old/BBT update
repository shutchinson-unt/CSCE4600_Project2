Enter file contents herevoid *BBT () {

   int need, time, pos;
   int power = 24;

   //write lock
   pthread_mutex_lock(&s_free_mutex);
   pthread_mutex_lock(&malloc_mutex);

   need = Head -> Next -> Memory;
   time = Head -> Next -> Cycle;

   struct tree *nav;
   nav = (struct tree*) malloc (sizeof(struct tree));
   nav -> Left = Root;

   int start = -1;
   int endL = 1;
   int endR = 1;

   while (need <= (2 ^ (power-1 && nav -> Left -> status != 2)))  {  //Can it fit in a smaller space?
      if (nav -> Left -> Left == NULL && nav -> Left -> Right == NULL)  {
         nav -> Left -> Left = (struct tree*) malloc (sizeof(struct tree));
         nav -> Left -> Right = (struct tree*) malloc (sizeof(struct tree));
         //make left child
         nav -> Left -> Left -> space = 2 ^ (power-1);
         nav -> Left -> Left -> Left = NULL;
         nav -> Left -> Left -> Right = NULL;
         nav -> Left -> Left -> up = nav -> Left;
         nav -> Left -> Left -> status = 1;
         //make right child
         nav -> Left -> Right -> space = 2 ^ (power-1);
         nav -> Left -> Right -> Left = NULL;
         nav -> Left -> Right -> Right = NULL;
         nav -> Left -> Right -> up = nav -> Left;
         nav -> Left -> Right -> status = 1;  }
         nav -> Left -> Right -> status = 1;  }
      //move nav
      nav -> Right = nav -> Left;

      if (nav -> Left -> Left -> status == 1)       //Move left if open
         nav -> Left = nav -> Left -> Left;

      else if (nav -> Left -> Right -> status == 1) //Move right if open                                 //Move right
         nav -> Left = nav -> Left -> Right;

      else if (nav -> Left -> Left -> status == 3 && endL == 1) { //If left is split, check kids to find open
         nav -> up = nav -> Left -> Left;
         while (nav -> up  -> status !=  2 &&  nav -> up -> Left != NULL &&  nav -> up -> up != NULL) {  //left most
            nav -> up = nav -> up  -> Left;
            power--;  }
         while (nav -> up  -> status !=  1 || nav -> up  -> space < need && endL == 1)  {//need open and big enough
            if (nav -> up -> up == NULL)
               //no room on left side...
               endL = 0;
            else  {
               nav -> up = nav -> up -> up -> Right;
               if (nav -> up  -> status ==  1 && nav -> up  -> space >= need)  {  //check sibling
                  nav -> Left = nav -> up;
                  power--;  }
               else  {
                  nav -> up = nav -> up -> up;
                  power++;  }  }  }
      }
      else if (nav -> Left -> Right -> status == 3) { //If right is split, check kids
         nav -> up = nav -> Left -> Right;
         while (nav -> up  -> status !=  2 &&  nav -> up -> Left != NULL &&  nav -> up -> up != NULL)  {
            nav -> up = nav -> up  -> Left;
            power--;  }
         while (nav -> up  -> status !=  1 || nav -> up  -> space < need && endR == 1)  {
            if (nav -> up -> up -> up == NULL)
            //...and no room on the right
            endR = 0;
            else  {
               nav -> up = nav -> up -> up -> Right;
               if (nav -> up  -> status ==  1 && nav -> up  -> space >= need)  {
                  nav -> Left = nav -> up;
                  power--;  }
               else  {
                  nav -> up = nav -> up -> up;
                  power++;  }  }  }
      }
      else  {          //both children closed
         endL = 0;
         endR = 0;  }

      if (endL == 0 && endR == 0)  //no open spots big enoough, so end
         power = 0;

      if ( nav -> Right -> status == 1)  {
        nav -> Right -> status = 3;
        power--;  }
   }

/*Finding Open spot finished*/
   if (endL != 0 || endR != 0 && nav -> Left -> status == 1)
      nav -> Left -> status = 2;
   else  {
      //no room, move to end of LL and end thread
      End -> Next -> Next = Head -> Next;
      End -> Next = End -> Next -> Next;
      Head -> Next = Head -> Next -> Next;
      End -> Next -> Next = NULL;  }
//this is just the end to building the tree
//next should be the code to lock and unlock
